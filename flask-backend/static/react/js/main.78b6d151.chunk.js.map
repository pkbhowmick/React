{"version":3,"sources":["components/SignUpForm.js","components/Repository.js","components/SignInForm.js","App.js","serviceWorker.js","index.js"],"names":["SignUpForm","state","name","email","password","confirm","handleChange","bind","handleSubmit","e","target","value","this","setState","preventDefault","data","alert","console","log","axios","post","then","response","localStorage","setItem","JSON","stringify","token","error","catch","err","className","onSubmit","htmlFor","type","id","placeholder","onChange","to","Component","SignInForm","exact","App","activeClassName","path","Boolean","window","location","hostname","match","element","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"js/main.78b6d151.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom'\nimport { signup } from './Repository'\n\nclass SignUpForm extends Component {\n    constructor() {\n        super();\n        this.state = {\n            name: \"\",\n            email: \"\",\n            password: \"\",\n            confirm: \"\"\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    handleChange(e) {\n        let target = e.target;\n        let value = target.value;\n        let name = target.name;\n\n        this.setState({\n            [name]: value\n        })\n\n    }\n    handleSubmit(e) {\n        e.preventDefault();\n        const { password, confirm } = this.state;\n        if (password !== confirm) {\n            alert(\"Passwords don't match\");\n        } else {\n            console.log(\"The form was submitted with the following data: \");\n            console.log(this.state);\n            signup(this.state)\n            .catch(err => alert(err));\n        }\n    }\n\n    render() {\n        return (\n            <form className=\"FormField\" onSubmit={this.handleSubmit}>\n                <div className=\"FormField\">\n                    <label className=\"FormField__Label\" htmlFor=\"name\">Full Name</label>\n                    <input className=\"FormField__Input\" type=\"text\" id=\"name\" placeholder=\"Enter your Full Name\" name=\"name\" value={this.state.name} onChange={this.handleChange} />\n                </div>\n                <div className=\"FormField\">\n                    <label className=\"FormField__Label\" htmlFor=\"email\">Email Address</label>\n                    <input className=\"FormField__Input\" type=\"email\" id=\"email\" placeholder=\"Enter your email address\" name=\"email\" value={this.state.email} onChange={this.handleChange} />\n                </div>\n                <div className=\"FormField\">\n                    <label className=\"FormField__Label\" htmlFor=\"password\">Password</label>\n                    <input className=\"FormField__Input\" type=\"password\" id=\"password\" placeholder=\"Enter your password\" name=\"password\" value={this.state.password} onChange={this.handleChange} />\n                </div>\n                <div className=\"FormField\">\n                    <label className=\"FormField__Label\" htmlFor=\"confirm\">Confirm Password</label>\n                    <input className=\"FormField__Input\" type=\"password\" id=\"confirm\" placeholder=\"Confirm your password\" name=\"confirm\" value={this.state.confirm} onChange={this.handleChange} />\n                </div>\n                <div className=\"FormField\">\n                    <button className=\"FormField__Button mr-20\" type=\"submit\" >Sign Up</button>\n                    <Link to=\"/sign-in\" className=\"FormField__Link\">Already have an account?</Link>\n                </div>\n            </form>\n        );\n    }\n}\nexport default SignUpForm;","import axios from 'axios';\n\nexport function signup(data) {\n    return axios.post(\"/register\", {\n        name: data.name,\n        email: data.email,\n        password: data.password,\n        confirm: data.confirm\n    })\n        .then(response => {\n            localStorage.setItem('signup-token',JSON.stringify(response.data.token));\n            return response.data\n        })\n        .then(error => {\n            console.log(error);\n        })\n}\n\nexport function login(data) {\n    return axios.post(\"/sign-in\", {\n        email: data.email,\n        password: data.password\n    })\n        .then(response => {\n            localStorage.setItem('signin-token',JSON.stringify(response.data.token));\n            return response.data\n        })\n        .then(error => {\n            console.log(error);\n        })\n}\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport {Link} from 'react-router-dom'\nimport { login } from './Repository'\n\nclass SignInForm extends Component {\n    constructor() {\n        super();\n        this.state = {\n            email: \"\",\n            password: \"\"            \n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    handleChange(e)\n    {\n        let target = e.target;\n        let value = target.value;\n        let name = target.name;\n\n        this.setState({\n            [name] : value\n        })\n\n    }\n    handleSubmit(e)\n    {\n        e.preventDefault();\n        console.log(\"The form was submitted with the following data: \");\n        console.log(this.state);\n        login(this.state)\n        .catch(err => alert(err));\n    }\n\n    render() {\n        return (\n            <form className=\"FormField\" onSubmit={this.handleSubmit}>\n                <div className=\"FormField\">\n                    <label className=\"FormField__Label\" htmlFor=\"email\">Email Address</label>\n                    <input className=\"FormField__Input\" type=\"email\" id=\"email\" placeholder=\"Enter your email address\" name=\"email\" value={this.state.email} onChange={this.handleChange} />\n                </div>\n                <div className=\"FormField\">\n                    <label className=\"FormField__Label\" htmlFor=\"password\">Password</label>\n                    <input className=\"FormField__Input\" type=\"password\" id=\"password\" placeholder=\"Enter your password\" name=\"password\" value={this.state.password} onChange={this.handleChange} />\n                </div>\n                <div className=\"FormField\">\n                    <button className=\"FormField__Button mr-20\" type=\"submit\" >Sign In</button>\n                    <Link exact to=\"/\" className=\"FormField__Link\">Create new account?</Link>\n                </div>\n            </form>\n        );\n    }\n}\nexport default SignInForm;","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Link, NavLink } from 'react-router-dom';\nimport SignUpForm from './components/SignUpForm';\nimport SignInForm from './components/SignInForm';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <div className=\"App__Aside\">\n          <div className=\"Text__Set\">\n            <h1>EKYC DEMO</h1>\n            <h2>Electronic Know Your Customer</h2>\n            <h2>\"We promise to protect your digital financial processes\"</h2>\n          </div>\n        </div>\n        <div className=\"App__Form\">\n          <div className=\"PageSwitcher\">\n            <NavLink to=\"/sign-in\" activeClassName=\"PageSwitcher__Item--Active\" className=\"PageSwitcher__Item\">Sign In</NavLink>\n            <NavLink exact to=\"/\" activeClassName=\"PageSwitcher__Item--Active\" className=\"PageSwitcher__Item\">Sign Up</NavLink>\n          </div>\n\n          <div className=\"FormTitle\">\n            <NavLink to=\"/sign-in\" activeClassName=\"FormTitle__Link--Active\" className=\"FormTitle__Link\">Sign In</NavLink>\n            <NavLink exact to=\"/\" activeClassName=\"FormTitle__Link--Active\"  className=\"FormTitle__Link\">Sign Up</NavLink>\n          </div>\n          <Route exact path=\"/\">\n          <div className=\"FormCenter\">\n            <SignUpForm />\n          </div>\n          </Route>\n          <Route exact path=\"/sign-in\">\n            <div className=\"FormCenter\">\n            <SignInForm />\n            </div>\n          </Route>\n\n        </div>\n\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst element = (\n  <div>\n    <App/>\n  </div>\n);\n\nReactDOM.render(element, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}